import { Provider } from "./parts/providers";
import { Config, initializationConfig } from "./parts/config";
export { Chainer as Convert } from "./parts/chainer";
/**
 * Regular converter class definition.
 *
 * @export
 * @class Converter
 */
export declare class Converter {
    /**
     * Converter's main config object.
     *
     * @type {Config}
     * @memberof Converter
     */
    config: Config;
    /**
     * Creates an instance of Converter and initializes the config.
     * @param {initializationConfig} config - base config
     * @memberof Converter
     */
    constructor(...config: initializationConfig[] | undefined[] | string[]);
    /**
     * Getters for active providers
     *
     * @readonly
     * @type {Provider[]}
     * @memberof Converter
     */
    readonly providers: Provider[];
    readonly active: Provider[];
    add: Function;
    addMultiple: Function;
    remove: Function;
    /**
     * Conversion function (non chainable).
     *
     * @example
     * let converter = new Converter()
     * let converted = await converter.convert(15,"USD","EUR")
     * console.log(converted);
     *
     * @param {number} amount - amount to be converted
     * @param {string} from - base currency
     * @param {string} to - conversion currency
     * @param {any} rates - conversion rates, if they were pre-fetched
     * @returns {Promise<number>} - converted amount
     */
    convert: (amount: number, from: string, to: string, rates?: any) => Promise<number>;
    /**
     * Rate fetch function
     * @param {string} from - base currency
     * @param {string} to - conversion currency
     * @param {boolean} multiple - determines conversion mode
     * @returns
     */
    getRates: (from: string, to: string, multiple?: boolean) => Promise<any>;
}
