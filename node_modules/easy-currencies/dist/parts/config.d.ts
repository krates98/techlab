import { Provider, UserDefinedProvider } from "./providers";
/**
 * Interface for the format of data passed in to the module initially.
 *
 * @interface initializationConfig
 */
export interface initializationConfig {
    key: any;
    provider: string;
}
/**
 * Config object that initializes with configuration data
 * passed in by the user.
 *
 * @export
 * @class Config
 */
export declare class Config {
    /**
     * Array of active curency API providers.
     *
     * @type {Provider[]}
     * @memberof Config
     */
    private _active;
    /**
     * Provider getter
     *
     * @returns {Provider[]}
     * @memberof Config
     */
    readonly providers: Provider[];
    /**
     * Provider setter (adder)
     *
     * @param {Provider[]} providers - providers to be added
     * @param {boolean} [setActive=false] - should the new provider(s) be prioritized
     * @returns {void}
     * @memberof Config
     */
    private addProviders;
    /**
     * Adds a single new, user-defined provider to the list of providers.
     *
     * @param {string} name - the new provider name
     * @param {Provider} provider - the new provider object
     * @param {boolean} [setActive=false] - should the new provider(s) be prioritized
     * @memberof Config
     */
    add: (name: string, provider: Provider, setActive?: boolean) => void;
    /**
     * Adds multiple new, user-defined provider to the list of providers.
     *
     * @param {UserDefinedProvider[]} providers - providers to be added
     * @param {boolean} [setActive=false] - should the new provider(s) be prioritized
     * @memberof Config
     */
    addMultiple: (newProviders: UserDefinedProvider[], setActive?: boolean) => void;
    /**
     * Removes a specific provider
     * @param {Provider} provider - provider to be removed
     * @memberof Config
     */
    remove: (provider: Provider) => void;
    /**
     * Returns the current provider
     *
     * @returns {Provider} - current provider
     * @memberof Config
     */
    activeProvider(): Provider;
    /**
     * Creates an instance of Config.
     * @param {(object | undefined)} config
     * @memberof Config
     */
    constructor(...config: initializationConfig[] | undefined[] | string[]);
}
/**
 * Config resolver that normalizes configuration input into the config interface
 *
 * @export
 * @param {(object | undefined)} configuration - initial configuration
 * @returns {config} - normalized configuration object
 */
export declare function resolveProviders(...configuration: initializationConfig[] | undefined[] | string[]): Provider[];
