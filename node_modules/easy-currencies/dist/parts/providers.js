"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A function that constructs provider based on raw input data.
 *
 * @export
 * @param {*} provider object containing provider name and api key
 * @returns {Provider} constructed provider
 */
function resolveProvider(provider) {
    var p = exports.providers[provider.name];
    if (!p) {
        throw "No provider with this name. Please use a provider from the supported providers list.";
    }
    // attaching key
    p.key = provider.key;
    return p;
}
exports.resolveProvider = resolveProvider;
/**
 * Provider map initialization
 */
exports.providers = {
    ExchangeRatesAPI: {
        endpoint: {
            base: "https://api.exchangeratesapi.io/latest",
            single: "?base=%FROM%&symbols=%TO%",
            multiple: "?base=%FROM%"
        },
        key: null,
        handler: function (data) {
            return data.rates;
        },
        errors: { 400: "Malformed query." },
        errorHandler: function (data) {
            return data.status;
        }
    },
    CurrencyLayer: {
        endpoint: {
            base: "http://apilayer.net/api/live?access_key=%KEY%",
            single: "&source=%FROM%",
            multiple: "&source=%FROM%&currencies=%TO%"
        },
        key: undefined,
        handler: function (data) {
            var map = {};
            Object.keys(data.quotes).map(function (key) {
                map[key.slice(3)] = data.quotes[key];
            });
            return map;
        },
        errors: {
            105: "A paid plan is required in order to use CurrencyLayer (base currency use not allowed)",
            101: "Invalid API key!",
            201: "Invalid base currency."
        },
        errorHandler: function (data) {
            return data.error ? data.error.code : null;
        }
    },
    OpenExchangeRates: {
        endpoint: {
            base: "https://openexchangerates.org/api/latest.json?app_id=%KEY%",
            single: "&base=%FROM%",
            multiple: "&base=%FROM%"
        },
        key: undefined,
        handler: function (data) {
            return data.rates;
        },
        errors: {
            401: "Invalid API key!"
        },
        errorHandler: function (data) {
            return data.status;
        }
    },
    AlphaVantage: {
        endpoint: {
            base: "https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&apikey=%KEY%",
            single: "&from_currency=%FROM%&to_currency=%TO%",
            multiple: ""
        },
        key: undefined,
        handler: function (data) {
            var map = {};
            var o = data[Object.keys(data)[0]];
            map[o["3. To_Currency Code"]] = o["5. Exchange Rate"];
            return map;
        },
        errors: {
            503: "Invalid API key or Malformed query."
        },
        errorHandler: function (data) {
            return data["Error Message"] ? 503 : false;
        }
    },
    Fixer: {
        endpoint: {
            base: "http://data.fixer.io/api/latest?access_key=%KEY%",
            single: "&base=%FROM%&symbols=%TO%",
            multiple: "&base=%FROM%"
        },
        key: undefined,
        handler: function (data) {
            return data.rates;
        },
        errors: {
            105: "A paid plan is required in order to use Fixer.io (base currency use not allowed)",
            101: "Invalid API key!",
            201: "Invalid base currency."
        },
        errorHandler: function (data) {
            return data.error ? data.error.code : null;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3BhcnRzL3Byb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXFGQTs7Ozs7O0dBTUc7QUFDSCxTQUFnQixlQUFlLENBQUMsUUFBYTtJQUMzQyxJQUFJLENBQUMsR0FBRyxpQkFBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1FBQ04sTUFBTSxzRkFBc0YsQ0FBQztLQUM5RjtJQUVELGdCQUFnQjtJQUNoQixDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7SUFDckIsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBVEQsMENBU0M7QUFFRDs7R0FFRztBQUNRLFFBQUEsU0FBUyxHQUFjO0lBQ2hDLGdCQUFnQixFQUFFO1FBQ2hCLFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSx3Q0FBd0M7WUFDOUMsTUFBTSxFQUFFLDJCQUEyQjtZQUNuQyxRQUFRLEVBQUUsY0FBYztTQUN6QjtRQUNELEdBQUcsRUFBRSxJQUFJO1FBQ1QsT0FBTyxFQUFFLFVBQVMsSUFBSTtZQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQUNELE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRTtRQUNuQyxZQUFZLEVBQUUsVUFBUyxJQUFJO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO0tBQ0Y7SUFDRCxhQUFhLEVBQUU7UUFDYixRQUFRLEVBQUU7WUFDUixJQUFJLEVBQUUsK0NBQStDO1lBQ3JELE1BQU0sRUFBRSxnQkFBZ0I7WUFDeEIsUUFBUSxFQUFFLGdDQUFnQztTQUMzQztRQUNELEdBQUcsRUFBRSxTQUFTO1FBQ2QsT0FBTyxFQUFFLFVBQVMsSUFBSTtZQUNwQixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDYixNQUFN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