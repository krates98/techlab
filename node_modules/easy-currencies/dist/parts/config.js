"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var providers_1 = require("./providers");
var utils_1 = require("./utils");
/**
 * Config object that initializes with configuration data
 * passed in by the user.
 *
 * @export
 * @class Config
 */
var Config = /** @class */ (function () {
    /**
     * Creates an instance of Config.
     * @param {(object | undefined)} config
     * @memberof Config
     */
    function Config() {
        var _this = this;
        var config = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            config[_i] = arguments[_i];
        }
        /**
         * Adds a single new, user-defined provider to the list of providers.
         *
         * @param {string} name - the new provider name
         * @param {Provider} provider - the new provider object
         * @param {boolean} [setActive=false] - should the new provider(s) be prioritized
         * @memberof Config
         */
        this.add = function (name, provider, setActive) {
            if (setActive === void 0) { setActive = false; }
            _this.addMultiple([{ name: name, provider: provider }], setActive);
        };
        /**
         * Adds multiple new, user-defined provider to the list of providers.
         *
         * @param {UserDefinedProvider[]} providers - providers to be added
         * @param {boolean} [setActive=false] - should the new provider(s) be prioritized
         * @memberof Config
         */
        this.addMultiple = function (newProviders, setActive) {
            if (setActive === void 0) { setActive = false; }
            // Duplicate check
            newProviders.forEach(function (p) {
                if (!utils_1.checkIfUserDefinedProvider(p)) {
                    throw "Invalid provider format!";
                }
                if (providers_1.providers[p.name]) {
                    throw "A provider by this name is already registered!";
                }
                providers_1.providers[p.name] = p.provider;
            });
            // Adding provider to active providers
            _this.addProviders(newProviders.map(function (p) { return p.provider; }), setActive);
        };
        /**
         * Removes a specific provider
         * @param {Provider} provider - provider to be removed
         * @memberof Config
         */
        this.remove = function (provider) {
            _this._active = _this._active.filter(function (p) { return p != provider; });
        };
        this._active = resolveProviders.apply(void 0, config);
        // adding default fallback
        this.addProviders([providers_1.providers["ExchangeRatesAPI"]], false);
    }
    Object.defineProperty(Config.prototype, "providers", {
        /**
         * Provider getter
         *
         * @returns {Provider[]}
         * @memberof Config
         */
        get: function () {
            return this._active;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Provider setter (adder)
     *
     * @param {Provider[]} providers - providers to be added
     * @param {boolean} [setActive=false] - should the new provider(s) be prioritized
     * @returns {void}
     * @memberof Config
     */
    Config.prototype.addProviders = function (providers, setActive) {
        var _a, _b;
        var _this = this;
        providers = providers.filter(function (p) {
            return !_this._active.find(function (a) { return a == p; });
        });
        if (setActive) {
            (_a = this._active).unshift.apply(_a, providers);
            return;
        }
        (_b = this._active).push.apply(_b, providers);
        return;
    };
    /**
     * Returns the current provider
     *
     * @returns {Provider} - current provider
     * @memberof Config
     */
    Config.prototype.activeProvider = function () {
        return this._active[0];
    };
    return Config;
}());
exports.Config = Config;
/**
 * Config resolver that normalizes configuration input into the config interface
 *
 * @export
 * @param {(object | undefined)} configuration - initial configuration
 * @returns {config} - normalized configuration object
 */
function resolveProviders() {
    var configuration = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        configuration[_i] = arguments[_i];
    }
    // resolve default if none provided.
    if (typeof configuration === "undefined" || !configuration.length) {
        return [providers_1.providers.ExchangeRatesAPI];
    }
    // checking for incorrect config types
    if (typeof configuration[0] !== "object" &&
        typeof configuration[0] !== "undefined" &&
        typeof configuration[0] !== "string") {
        throw "You must either supply nothing or a config object (see the 'config' section to see the different APIs that can be used)";
    }
    // returning single provider
    if (typeof configuration[0] === "string") {
        // constructing in initializationConfig object from string values
        return [providers_1.resolveProvider({ name: configuration[0], key: configuration[1] })];
    }
    // configuration is an array of providers
    // casting
    var c = configuration;
    // resolving all providers
    return c.map(function (provider) { return providers_1.resolveProvider(provider); });
}
exports.resolveProviders = resolveProviders;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3BhcnRzL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUtxQjtBQUVyQixpQ0FBcUQ7QUFZckQ7Ozs7OztHQU1HO0FBQ0g7SUF5R0U7Ozs7T0FJRztJQUNIO1FBQUEsaUJBS0M7UUFMVyxnQkFBMEQ7YUFBMUQsVUFBMEQsRUFBMUQscUJBQTBELEVBQTFELElBQTBEO1lBQTFELDJCQUEwRDs7UUF0RXRFOzs7Ozs7O1dBT0c7UUFDSCxRQUFHLEdBQUcsVUFDSixJQUFZLEVBQ1osUUFBa0IsRUFDbEIsU0FBMEI7WUFBMUIsMEJBQUEsRUFBQSxpQkFBMEI7WUFFMUIsS0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxNQUFBLEVBQUUsUUFBUSxVQUFBLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQztRQUVGOzs7Ozs7V0FNRztRQUNILGdCQUFXLEdBQUcsVUFDWixZQUFtQyxFQUNuQyxTQUEwQjtZQUExQiwwQkFBQSxFQUFBLGlCQUEwQjtZQUUxQixrQkFBa0I7WUFDbEIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxrQ0FBMEIsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDbEMsTUFBTSwwQkFBMEIsQ0FBQztpQkFDbEM7Z0JBRUQsSUFBSSxxQkFBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDckIsTUFBTSxnREFBZ0QsQ0FBQztpQkFDeEQ7Z0JBQ0QscUJBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUNqQyxDQUFDLENBQUMsQ0FBQztZQUVILHNDQUFzQztZQUN0QyxLQUFJLENBQUMsWUFBWSxDQUNmLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMs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